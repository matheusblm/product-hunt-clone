schema {
  query: Query
  mutation: Mutation
}

"""A collection of posts."""
type Collection implements TopicableInterface {
  """Cover image for the collection."""
  coverImage: String
  """Identifies the date and time when collection was created."""
  createdAt: DateTime!
  """Description of the collection in plain text."""
  description: String
  """Identifies the date and time when collection was featured."""
  featuredAt: DateTime
  """Number of users following the collection."""
  followersCount: Int!
  """ID of the collection."""
  id: ID!
  """Whether the viewer is following the collection or not."""
  isFollowing: Boolean!
  """Name of the collection."""
  name: String!
  """Lookup posts which are part of the collection."""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection!
  """Tagline of the collection."""
  tagline: String!
  """Look up topics that are associated with the object."""
  topics(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): TopicConnection!
  """Public URL of the goal."""
  url: String!
  """User who created the collection."""
  user: User!
  """ID of User who created the collection."""
  userId: ID!
}

"""The connection type for Collection."""
type CollectionConnection {
  """A list of edges."""
  edges: [CollectionEdge!]!
  """A list of nodes."""
  nodes: [Collection!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Total number of objects returned from this query"""
  totalCount: Int!
}

"""An edge in a connection."""
type CollectionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Collection!
}

enum CollectionsOrder {
  """Returns Collections in descending order of featured date."""
  FEATURED_AT
  """Returns Collections in descending order of followers count."""
  FOLLOWERS_COUNT
  """Returns Collections in descending order of creation date."""
  NEWEST
}

"""A comment posted by a User."""
type Comment implements VotableInterface {
  """Body of the comment."""
  body: String!
  """Identifies the date and time when comment was created."""
  createdAt: DateTime!
  """ID of the comment."""
  id: ID!
  """Whether the Viewer has voted for the object or not."""
  isVoted: Boolean!
  """
  Comment on which this comment was posted(null in case of top level comments).
  """
  parent: Comment
  """
  ID of Comment on which this comment was posted(null in case of top level comments).
  """
  parentId: ID
  """Lookup comments that were posted on the comment itself."""
  replies(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Define order for the Comments."""
    order: CommentsOrder = NEWEST
  ): CommentConnection!
  """Public URL of the comment."""
  url: String!
  """User who posted the comment."""
  user: User!
  """ID of User who posted the comment."""
  userId: ID!
  votes(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Select Votes which were created after the given date and time."""
    createdAfter: DateTime
    """Select Votes which were created before the given date and time."""
    createdBefore: DateTime
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): VoteConnection!
  """Number of votes that the object has currently."""
  votesCount: Int!
}

"""The connection type for Comment."""
type CommentConnection {
  """A list of edges."""
  edges: [CommentEdge!]!
  """A list of nodes."""
  nodes: [Comment!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Total number of objects returned from this query"""
  totalCount: Int!
}

"""An edge in a connection."""
type CommentEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Comment!
}

enum CommentsOrder {
  """Returns Comments in descending order of creation date."""
  NEWEST
  """Returns Comments in descending order of votes count."""
  VOTES_COUNT
}

"""An ISO-8601 encoded UTC date string."""
scalar DateTime

type Error {
  """Field for which the error occurred."""
  field: String!
  """Error message."""
  message: String!
}

"""A media object."""
type Media {
  """Type of media object."""
  type: String!
  """
  Public URL for the media object. Incase of videos this URL represents thumbnail generated from video.
  """
  url(
    """Set height of the image to given value."""
    height: Int
    """Set width of the image to given value."""
    width: Int
  ): String!
  """Video URL of the media object."""
  videoUrl: String
}

type Mutation {
  """Follow a User as Viewer. Returns the followed User."""
  userFollow(
    """Parameters for UserFollow"""
    input: UserFollowInput!
  ): UserFollowPayload!
  """Stop following a User as Viewer. Returns the un-followed User."""
  userFollowUndo(
    """Parameters for UserFollowUndo"""
    input: UserFollowUndoInput!
  ): UserFollowUndoPayload!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""A post."""
type Post implements TopicableInterface & VotableInterface {
  """Lookup collections which the Post is part of."""
  collections(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): CollectionConnection!
  """Lookup comments on the Post."""
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Define order for the Comments."""
    order: CommentsOrder = NEWEST
  ): CommentConnection!
  """Number of comments made on the Post."""
  commentsCount: Int!
  """Identifies the date and time when the Post was created."""
  createdAt: DateTime!
  """Description of the Post in plain text."""
  description: String
  """Identifies the date and time when the Post was featured."""
  featuredAt: DateTime
  """ID of the Post."""
  id: ID!
  """Whether the viewer has added the Post to one of their collections."""
  isCollected: Boolean!
  """Whether the Viewer has voted for the object or not."""
  isVoted: Boolean!
  """Users who are marked as makers of the Post."""
  makers: [User!]!
  """Media items for the Post."""
  media: [Media!]!
  """Name of the Post."""
  name: String!
  """Additional product links"""
  productLinks: [ProductLink!]!
  """Count of review for the Post"""
  reviewsCount: Int!
  """Aggregate review rating for the Post."""
  reviewsRating: Float!
  """URL friendly slug of the Post."""
  slug: String!
  """Tagline of the Post."""
  tagline: String!
  """Thumbnail media object of the Post."""
  thumbnail: Media
  """Look up topics that are associated with the object."""
  topics(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): TopicConnection!
  """URL of the Post on Product Hunt."""
  url: String!
  """User who created the Post."""
  user: User!
  """ID of User who created the Post."""
  userId: ID!
  votes(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Select Votes which were created after the given date and time."""
    createdAfter: DateTime
    """Select Votes which were created before the given date and time."""
    createdBefore: DateTime
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): VoteConnection!
  """Number of votes that the object has currently."""
  votesCount: Int!
  """URL that redirects to the Post's website."""
  website: String!
}

"""The connection type for Post."""
type PostConnection {
  """A list of edges."""
  edges: [PostEdge!]!
  """A list of nodes."""
  nodes: [Post!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Total number of objects returned from this query"""
  totalCount: Int!
}

"""An edge in a connection."""
type PostEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Post!
}

enum PostsOrder {
  """Returns Posts in descending order of featured date."""
  FEATURED_AT
  """Returns Posts in descending order of creation date."""
  NEWEST
  """Returns Posts in descending order of ranking."""
  RANKING
  """Returns Posts in descending order of votes count."""
  VOTES
}

"""Product link from a post."""
type ProductLink {
  type: String!
  url: String!
}

"""The query root for Product Hunt API V2 schema"""
type Query {
  """Look up a Collection(only published)."""
  collection(
    """ID for the object."""
    id: ID
    """URL friendly slug for the object."""
    slug: String
  ): Collection
  """Look up Collections by various parameters."""
  collections(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """
    Select Collections that have been featured or not featured depending on given value.
    """
    featured: Boolean
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Define order for the Collections."""
    order: CollectionsOrder = FOLLOWERS_COUNT
    """Select Collections that have the Post with the given ID."""
    postId: ID
    """Select Collections that are created by User with the given ID."""
    userId: ID
  ): CollectionConnection!
  """Look up a Comment."""
  comment(
    """ID for the object."""
    id: ID!
  ): Comment
  """Look up a Post."""
  post(
    """ID for the object."""
    id: ID
    """URL friendly slug for the object."""
    slug: String
  ): Post
  """Look up Posts by various parameters."""
  posts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """
    Select Posts that have been featured or not featured depending on given value.
    """
    featured: Boolean
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Define order for the Posts."""
    order: PostsOrder = RANKING
    """Select Posts which were posted after the given date and time."""
    postedAfter: DateTime
    """Select Posts which were posted before the given date and time."""
    postedBefore: DateTime
    """Select Posts that have the given slug as one of their topics."""
    topic: String
    """Select Posts that have the given twitter url."""
    twitterUrl: String
    """Select Posts that have the given url."""
    url: String
  ): PostConnection!
  """Look up a Topic."""
  topic(
    """ID for the object."""
    id: ID
    """URL friendly slug for the object."""
    slug: String
  ): Topic
  """Look up Topics by various parameters."""
  topics(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Select Topics that are followed by User with the given ID."""
    followedByUserid: ID
    """Returns the last _n_ elements from the list."""
    last: Int
    """Define order for the Topics."""
    order: TopicsOrder = NEWEST
    """Select Topics whose name or aliases match the given string"""
    query: String
  ): TopicConnection!
  """Look up a User."""
  user(
    """ID for the user."""
    id: ID
    """Username for the user."""
    username: String
  ): User
  """Top level scope for currently authenticated user."""
  viewer: Viewer
}

"""A topic."""
type Topic {
  """Identifies the date and time when topic was created."""
  createdAt: DateTime!
  """Description of the topic."""
  description: String!
  """Number of users who are following the topic."""
  followersCount: Int!
  """ID of the topic."""
  id: ID!
  """Image of the topic."""
  image(height: Int, width: Int): String
  """Whether the viewer is following the topic or not."""
  isFollowing: Boolean!
  """Name of the topic."""
  name: String!
  """Number of posts that are part of the topic."""
  postsCount: Int!
  """URL friendly slug of the topic."""
  slug: String!
  """Public URL of the topic."""
  url: String!
}

"""The connection type for Topic."""
type TopicConnection {
  """A list of edges."""
  edges: [TopicEdge!]!
  """A list of nodes."""
  nodes: [Topic!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Total number of objects returned from this query"""
  totalCount: Int!
}

"""An edge in a connection."""
type TopicEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Topic!
}

"""An object that can have topics associated with it."""
interface TopicableInterface {
  """ID of the object."""
  id: ID!
  """Look up topics that are associated with the object."""
  topics(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): TopicConnection!
}

enum TopicsOrder {
  """Returns Topics in descending order of followers count."""
  FOLLOWERS_COUNT
  """Returns Topics in descending order of creation date."""
  NEWEST
}

"""
A user. The data is only available for the currently-accessing user, otherwise all of it will be redacted to protect other users' privacy.
"""
type User {
  """Cover image of the user."""
  coverImage(height: Int, width: Int): String
  """Identifies the date and time when user was created."""
  createdAt: DateTime!
  """Look up collections that the user is following."""
  followedCollections(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): CollectionConnection!
  """
  [REDACTED] Look up other users who are following the user (Always empty for privacy reasons).
  """
  followers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection!
  """
  [REDACTED] Look up other users who are being followed by the user (Always empty for privacy reasons)
  """
  following(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection!
  """Headline text of the user."""
  headline: String
  """ID of the user."""
  id: ID!
  """
  [REDACTED] Whether the viewer is following the user or not (Always false for privacy reasons).
  """
  isFollowing: Boolean
  """Whether the user is an accepted maker or not."""
  isMaker: Boolean!
  """Whether the user is same as the viewer of the API."""
  isViewer: Boolean!
  """Look up posts that the user has made."""
  madePosts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection!
  """Name of the user."""
  name: String!
  """Profile image of the user."""
  profileImage(size: Int): String
  """Look up posts that the user has submitted."""
  submittedPosts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection!
  """Twitter username of the user."""
  twitterUsername: String
  """Public URL of the user's profile"""
  url: String!
  """Username of the user."""
  username: String!
  """Look up posts that the user has voted for."""
  votedPosts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): PostConnection!
  """URL for the user's website"""
  websiteUrl: String
}

"""The connection type for User."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge!]!
  """A list of nodes."""
  nodes: [User!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Total number of objects returned from this query"""
  totalCount: Int!
}

"""An edge in a connection."""
type UserEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: User!
}

"""Autogenerated input type of UserFollow"""
input UserFollowInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """ID of the User to follow."""
  userId: ID!
}

"""Autogenerated return type of UserFollow."""
type UserFollowPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [Error!]!
  node: User
}

"""Autogenerated input type of UserFollowUndo"""
input UserFollowUndoInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  """ID of the User to stop following."""
  userId: ID!
}

"""Autogenerated return type of UserFollowUndo."""
type UserFollowUndoPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [Error!]!
  node: User
}

"""Top level scope for the user in whose context the API is running."""
type Viewer {
  """User who is the viewer of the API."""
  user: User!
}

"""An object which users can vote for."""
interface VotableInterface {
  """ID of the object"""
  id: ID!
  """Whether the Viewer has voted for the object or not."""
  isVoted: Boolean!
  votes(
    """Returns the elements in the list that come after the specified cursor."""
    after: String
    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    """Select Votes which were created after the given date and time."""
    createdAfter: DateTime
    """Select Votes which were created before the given date and time."""
    createdBefore: DateTime
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
  ): VoteConnection!
  """Number of votes that the object has currently."""
  votesCount: Int!
}

"""A vote."""
type Vote {
  """Identifies the date and time when Vote was created."""
  createdAt: DateTime!
  """ID of the Vote."""
  id: ID!
  """User who created the Vote."""
  user: User!
  """ID of User who created the Vote."""
  userId: ID!
}

"""The connection type for Vote."""
type VoteConnection {
  """A list of edges."""
  edges: [VoteEdge!]!
  """A list of nodes."""
  nodes: [Vote!]!
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Total number of objects returned from this query"""
  totalCount: Int!
}

"""An edge in a connection."""
type VoteEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of the edge."""
  node: Vote!
}